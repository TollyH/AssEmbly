//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssEmbly.Resources.Localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings_Assembler {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings_Assembler() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AssEmbly.Resources.Localization.Strings.Assembler", typeof(Strings_Assembler).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} defined assembler variable(s):.
        /// </summary>
        internal static string Debug_Directive_Assembler_Variable_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Assembler_Variable_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} -&gt; {1:N0}.
        /// </summary>
        internal static string Debug_Directive_Assembler_Variable_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Assembler_Variable_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Current extensions used: {0}.
        /// </summary>
        internal static string Debug_Directive_Current_Extensions {
            get {
                return ResourceManager.GetString("Debug_Directive_Current_Extensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently inside {0} %IF block(s)..
        /// </summary>
        internal static string Debug_Directive_Current_If_Blocks {
            get {
                return ResourceManager.GetString("Debug_Directive_Current_If_Blocks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} %WHILE repetitions toward limit of {1}.
        /// </summary>
        internal static string Debug_Directive_Current_While_Repeats {
            get {
                return ResourceManager.GetString("Debug_Directive_Current_While_Repeats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///%DEBUG directive on line {0} in {1}
        ///Program is currently {2:N0} bytes long..
        /// </summary>
        internal static string Debug_Directive_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently {0} lines into macro expansion for current line..
        /// </summary>
        internal static string Debug_Directive_Header_Macro_Lines {
            get {
                return ResourceManager.GetString("Debug_Directive_Header_Macro_Lines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Current import stack (deepest file first):.
        /// </summary>
        internal static string Debug_Directive_Import_Stack_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Import_Stack_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} at line {1}/{2}.
        /// </summary>
        internal static string Debug_Directive_Import_Stack_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Import_Stack_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently inside macro skip block. Macros will not be expanded until it is closed..
        /// </summary>
        internal static string Debug_Directive_Inside_Macro_Skip_Block {
            get {
                return ResourceManager.GetString("Debug_Directive_Inside_Macro_Skip_Block", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} label(s) currently defined:.
        /// </summary>
        internal static string Debug_Directive_Label_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Label_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} -&gt; {1:X16}.
        /// </summary>
        internal static string Debug_Directive_Label_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Label_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} label link(s) currently defined:.
        /// </summary>
        internal static string Debug_Directive_Label_Link_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Label_Link_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} -&gt; {1}[{4}] (from {2} at line {3}) - additionally displaced by {5}.
        /// </summary>
        internal static string Debug_Directive_Label_Link_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Label_Link_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} label reference(s) pending fill:.
        /// </summary>
        internal static string Debug_Directive_LabelRef_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_LabelRef_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} -&gt; {1:X16}.
        /// </summary>
        internal static string Debug_Directive_LabelRef_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_LabelRef_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Current macro stack (current macro first):.
        /// </summary>
        internal static string Debug_Directive_Macro_Stack_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Macro_Stack_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} with {1} lines remaining.
        /// </summary>
        internal static string Debug_Directive_Macro_Stack_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Macro_Stack_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} defined multi-line macro(s):.
        /// </summary>
        internal static string Debug_Directive_Multi_Line_Macro_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Multi_Line_Macro_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} -&gt; {1}....
        /// </summary>
        internal static string Debug_Directive_Multi_Line_Macro_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Multi_Line_Macro_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Current repeat stack (deepest repeat first):.
        /// </summary>
        internal static string Debug_Directive_Repeat_Stack_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Repeat_Stack_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {2} iterations remaining for repeat at line {1} of {0}.
        /// </summary>
        internal static string Debug_Directive_Repeat_Stack_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Repeat_Stack_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} defined single-line macro(s):.
        /// </summary>
        internal static string Debug_Directive_Single_Line_Macro_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_Single_Line_Macro_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     {0} -&gt; {1}.
        /// </summary>
        internal static string Debug_Directive_Single_Line_Macro_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_Single_Line_Macro_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Current while stack (deepest while first):.
        /// </summary>
        internal static string Debug_Directive_While_Stack_Header {
            get {
                return ResourceManager.GetString("Debug_Directive_While_Stack_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     Condition at line {1} of {0}.
        /// </summary>
        internal static string Debug_Directive_While_Stack_Line {
            get {
                return ResourceManager.GetString("Debug_Directive_While_Stack_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given address reference does not start with a colon character..
        /// </summary>
        internal static string Error_Address_Bad_First_Char {
            get {
                return ResourceManager.GetString("Error_Address_Bad_First_Char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ANALYZER directive requires 3 operands. {0} were given..
        /// </summary>
        internal static string Error_ANALYZER_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ANALYZER_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first operand to the %ANALYZER directive must be one of &apos;error&apos;, &apos;warning&apos; or &apos;suggestion&apos;..
        /// </summary>
        internal static string Error_ANALYZER_Operand_First {
            get {
                return ResourceManager.GetString("Error_ANALYZER_Operand_First", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second operand to the %ANALYZER directive must be an integer..
        /// </summary>
        internal static string Error_ANALYZER_Operand_Second {
            get {
                return ResourceManager.GetString("Error_ANALYZER_Operand_Second", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The third operand to the %ANALYZER directive must be one of &apos;0&apos;, &apos;1&apos;, or &apos;r&apos;..
        /// </summary>
        internal static string Error_ANALYZER_Operand_Third {
            get {
                return ResourceManager.GetString("Error_ANALYZER_Operand_Third", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ASM_ONCE directive cannot be used in the base file..
        /// </summary>
        internal static string Error_ASM_ONCE_Not_Imported {
            get {
                return ResourceManager.GetString("Error_ASM_ONCE_Not_Imported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ASM_ONCE directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_ASM_ONCE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ASM_ONCE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start index is outside the range of the given line..
        /// </summary>
        internal static string Error_Bad_StartIndex {
            get {
                return ResourceManager.GetString("Error_Bad_StartIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Character literals must contain at least 1 character.
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Character_Literal_Empty {
            get {
                return ResourceManager.GetString("Error_Character_Literal_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Character literals may only contain a single character. Did you mean to use double quotes for a string literal?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Character_Literal_Too_Long {
            get {
                return ResourceManager.GetString("Error_Character_Literal_Too_Long", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Circular import detected: attempted import from &quot;{0}&quot; when it is already in import stack..
        /// </summary>
        internal static string Error_Circular_Import {
            get {
                return ResourceManager.GetString("Error_Circular_Import", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Circular macro detected: attempted to expand &quot;{0}&quot; when it is already in macro stack..
        /// </summary>
        internal static string Error_Circular_Macro {
            get {
                return ResourceManager.GetString("Error_Circular_Macro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of file reached while processing block contents. Did you forget a closing directive?.
        /// </summary>
        internal static string Error_Closing_Directive_Missing {
            get {
                return ResourceManager.GetString("Error_Closing_Directive_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {1} directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_Closing_Directive_Operand_Count {
            get {
                return ResourceManager.GetString("Error_Closing_Directive_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} directive requires 2 operands for the DEF and NDEF operations, or 3 for the numerical comparison operations. {1} were given..
        /// </summary>
        internal static string Error_Conditional_Operand_Count {
            get {
                return ResourceManager.GetString("Error_Conditional_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{1}&quot; is not a recognised operation for the {0} directive..
        /// </summary>
        internal static string Error_Conditional_Operand_First {
            get {
                return ResourceManager.GetString("Error_Conditional_Operand_First", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second and third operands to the {0} directive cannot be a label reference..
        /// </summary>
        internal static string Error_Conditional_Operand_Second_Third_Label_Reference {
            get {
                return ResourceManager.GetString("Error_Conditional_Operand_Second_Third_Label_Reference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second and third operands to the {0} directive must be literals..
        /// </summary>
        internal static string Error_Conditional_Operand_Second_Third_Type {
            get {
                return ResourceManager.GetString("Error_Conditional_Operand_Second_Third_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembler constant names cannot be empty. To use an &apos;@&apos; sign in a string, escape it with a backslash..
        /// </summary>
        internal static string Error_Constant_Empty_Name {
            get {
                return ResourceManager.GetString("Error_Constant_Empty_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An assembler constant with the name &quot;{0}&quot; does not exist. To use an &apos;@&apos; sign in a string, escape it with a backslash..
        /// </summary>
        internal static string Error_Constant_Not_Exists {
            get {
                return ResourceManager.GetString("Error_Constant_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %DAT directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_DAT_Operand_Count {
            get {
                return ResourceManager.GetString("Error_DAT_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %DAT directive cannot be a label reference..
        /// </summary>
        internal static string Error_DAT_Operand_Label_Reference {
            get {
                return ResourceManager.GetString("Error_DAT_Operand_Label_Reference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric literal too large for %DAT, or is negative/floating point. 255 is the maximum value:
        ///    {0}.
        /// </summary>
        internal static string Error_DAT_Operand_Too_Large {
            get {
                return ResourceManager.GetString("Error_DAT_Operand_Too_Large", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %DAT directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_DAT_Operand_Type {
            get {
                return ResourceManager.GetString("Error_DAT_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %DEBUG directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_DEBUG_Operand_Count {
            get {
                return ResourceManager.GetString("Error_DEBUG_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %DEFINE directive requires 2 operands. {0} were given..
        /// </summary>
        internal static string Error_DEFINE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_DEFINE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second operand to the %DEFINE directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_DEFINE_Operand_Type {
            get {
                return ResourceManager.GetString("Error_DEFINE_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A macro with the name &quot;{0}&quot; does not exist..
        /// </summary>
        internal static string Error_DELMACRO_Not_Exists {
            get {
                return ResourceManager.GetString("Error_DELMACRO_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %DELMACRO directive requires a single operand..
        /// </summary>
        internal static string Error_DELMACRO_Operand_Count {
            get {
                return ResourceManager.GetString("Error_DELMACRO_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Note that the displacement component of an address or label must be a single numeric literal..
        /// </summary>
        internal static string Error_Displacement_Address_Bad_Chars {
            get {
                return ResourceManager.GetString("Error_Displacement_Address_Bad_Chars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given displacement start index does not point to an opening square bracket..
        /// </summary>
        internal static string Error_Displacement_Bad_First_Char {
            get {
                return ResourceManager.GetString("Error_Displacement_Bad_First_Char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displacement components cannot be empty.
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Displacement_Empty {
            get {
                return ResourceManager.GetString("Error_Displacement_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of line found while processing displacement component. Did you forget a closing square bracket?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Displacement_EndOfLine {
            get {
                return ResourceManager.GetString("Error_Displacement_EndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-whitespace characters found after displacement component. Did you forget a comma?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Displacement_Followed {
            get {
                return ResourceManager.GetString("Error_Displacement_Followed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Label literal displacements can themselves be displaced by nesting square brackets, not through the use of +/- signs..
        /// </summary>
        internal static string Error_Displacement_Label_Invalid {
            get {
                return ResourceManager.GetString("Error_Displacement_Label_Invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label literal displacement components cannot be negated.
        ///    {0}
        ///    ^.
        /// </summary>
        internal static string Error_Displacement_LabelLiteral_Negated {
            get {
                return ResourceManager.GetString("Error_Displacement_LabelLiteral_Negated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An opening square bracket cannot be the only character on a line..
        /// </summary>
        internal static string Error_Displacement_Line_Length_One {
            get {
                return ResourceManager.GetString("Error_Displacement_Line_Length_One", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displacement component is defined without a preceding pointer or address reference. Did you mean to include the square bracket?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Displacement_No_Preceding {
            get {
                return ResourceManager.GetString("Error_Displacement_No_Preceding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addresses inside displacement components must be label literals (i.e. use the :&amp; prefix)..
        /// </summary>
        internal static string Error_Displacement_Not_LabelLiteral {
            get {
                return ResourceManager.GetString("Error_Displacement_Not_LabelLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The register multiplier of a pointer displacement must be a power of two no larger than 128, i.e. 1, 2, 4, 8, 16, etc..
        /// </summary>
        internal static string Error_Displacement_Pointer_Bad_Multiplier {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Bad_Multiplier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a recognised register name. Displacements can only contain registers and numeric literals..
        /// </summary>
        internal static string Error_Displacement_Pointer_Bad_Register {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Bad_Register", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Note that if the displacement component of a pointer starts with a numeric literal, the literal must be the only part to the displacement. Displacement by a register must come first if desired..
        /// </summary>
        internal static string Error_Displacement_Pointer_Constant_Bad_Chars {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Constant_Bad_Chars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Note that when displacing by a register and a constant, the register must be followed by a single numeric literal with one of the + or - operators, or by a label literal with only the + operator. Only register displacements can be multiplied. Label literals displacements can be displaced by nesting square brackets, not by following them a +/- sign..
        /// </summary>
        internal static string Error_Displacement_Pointer_Label_Invalid {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Label_Invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Note that if the displacement component of a pointer starts with a label literal, the literal must be the only part to the displacement. Label literal displacements can themselves be displaced by nesting square brackets, not through the use of +/- signs. Displacement by a register must come first if desired..
        /// </summary>
        internal static string Error_Displacement_Pointer_Label_Start_Invalid {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Label_Start_Invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Note that a register displacement can only be multiplied by a single numeric literal..
        /// </summary>
        internal static string Error_Displacement_Pointer_Multiplier_Bad_Chars {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Multiplier_Bad_Chars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Note that when displacing by a register and a constant, the register must be followed by a single numeric or label literal with one of the + or - operators. Only register displacements can be multiplied..
        /// </summary>
        internal static string Error_Displacement_Pointer_Register_Constant_Bad_Chars {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Register_Constant_Bad_Chars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displacement ends with a trailing operator:
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Displacement_Pointer_Trailing_Operator {
            get {
                return ResourceManager.GetString("Error_Displacement_Pointer_Trailing_Operator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ELSE directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_ELSE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ELSE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ELSEIF directive requires 2 or 3 operands. {0} were given..
        /// </summary>
        internal static string Error_ELSEIF_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ELSEIF_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operands cannot be empty:
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Empty_Operand {
            get {
                return ResourceManager.GetString("Error_Empty_Operand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of file reached with a conditional block still open. Did you forget an %ENDIF directive?.
        /// </summary>
        internal static string Error_ENDIF_Missing {
            get {
                return ResourceManager.GetString("Error_ENDIF_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ENDIF directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_ENDIF_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ENDIF_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of file reached with a repeat block still open. Did you forget an %ENDREPEAT directive?.
        /// </summary>
        internal static string Error_ENDREPEAT_Missing {
            get {
                return ResourceManager.GetString("Error_ENDREPEAT_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ENDREPEAT directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_ENDREPEAT_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ENDREPEAT_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of file reached with a while block still open. Did you forget an %ENDWHILE directive?.
        /// </summary>
        internal static string Error_ENDWHILE_Missing {
            get {
                return ResourceManager.GetString("Error_ENDWHILE_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %ENDWHILE directive takes no operands. {0} were given..
        /// </summary>
        internal static string Error_ENDWHILE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_ENDWHILE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This assembler has already been finalized. No more lines can be assembled..
        /// </summary>
        internal static string Error_Finalized {
            get {
                return ResourceManager.GetString("Error_Finalized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &quot;{0}&quot; given to the %IBF directive could not be found..
        /// </summary>
        internal static string Error_IBF_File_Not_Exists {
            get {
                return ResourceManager.GetString("Error_IBF_File_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %IBF directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_IBF_Operand_Count {
            get {
                return ResourceManager.GetString("Error_IBF_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %IBF directive must be a string..
        /// </summary>
        internal static string Error_IBF_Operand_String {
            get {
                return ResourceManager.GetString("Error_IBF_Operand_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %IBF directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_IBF_Operand_Type {
            get {
                return ResourceManager.GetString("Error_IBF_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &quot;{0}&quot; given to the %IMP directive could not be found..
        /// </summary>
        internal static string Error_IMP_File_Not_Exists {
            get {
                return ResourceManager.GetString("Error_IMP_File_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %IMP directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_IMP_Operand_Count {
            get {
                return ResourceManager.GetString("Error_IMP_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %IMP directive must be a string..
        /// </summary>
        internal static string Error_IMP_Operand_String {
            get {
                return ResourceManager.GetString("Error_IMP_Operand_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %IMP directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_IMP_Operand_Type {
            get {
                return ResourceManager.GetString("Error_IMP_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognised escape character &apos;{0}&apos;. Did you forget to escape the backslash?
        ///    {1}
        ///    {2}^.
        /// </summary>
        internal static string Error_Invalid_Escape_Sequence {
            get {
                return ResourceManager.GetString("Error_Invalid_Escape_Sequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert a label definition to a literal address. Are you sure you meant to include the &apos;&amp;&apos;?
        ///    {0}
        ///     ^.
        /// </summary>
        internal static string Error_Invalid_Literal_Label {
            get {
                return ResourceManager.GetString("Error_Invalid_Literal_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognised mnemonic and operand combination:
        ///    {0} {1}
        ///Consult the language reference for a list of all valid mnemonic/operand combinations..
        /// </summary>
        internal static string Error_Invalid_Mnemonic_Combo {
            get {
                return ResourceManager.GetString("Error_Invalid_Mnemonic_Combo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given severity is not valid..
        /// </summary>
        internal static string Error_Invalid_Severity {
            get {
                return ResourceManager.GetString("Error_Invalid_Severity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label &quot;{0}&quot; has already been defined. Label names must be unique..
        /// </summary>
        internal static string Error_Label_Already_Defined {
            get {
                return ResourceManager.GetString("Error_Label_Already_Defined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label definitions cannot have a displacement component.
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Label_Definition_Displaced {
            get {
                return ResourceManager.GetString("Error_Label_Definition_Displaced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label names cannot be empty. Did you mean to include a colon here?.
        /// </summary>
        internal static string Error_Label_Empty_Name {
            get {
                return ResourceManager.GetString("Error_Label_Empty_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid character in label:
        ///    {0}
        ///    {1}^
        ///Label names may not contain symbols other than underscores, and cannot start with a numeral..
        /// </summary>
        internal static string Error_Label_Invalid_Character {
            get {
                return ResourceManager.GetString("Error_Label_Invalid_Character", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A label with the name &quot;{0}&quot; does not exist, but a reference was made to it. Have you missed a definition?.
        /// </summary>
        internal static string Error_Label_Not_Exists {
            get {
                return ResourceManager.GetString("Error_Label_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label references given as an operand to the %LABEL_OVERRIDE directive cannot also be a target of the directive. &quot;{0}&quot; was given as both..
        /// </summary>
        internal static string Error_LABEL_OVERRIDE_Label_Reference_Also_Target {
            get {
                return ResourceManager.GetString("Error_LABEL_OVERRIDE_Label_Reference_Also_Target", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %LABEL_OVERRIDE directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_LABEL_OVERRIDE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_LABEL_OVERRIDE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %LABEL_OVERRIDE directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_LABEL_OVERRIDE_Operand_Type {
            get {
                return ResourceManager.GetString("Error_LABEL_OVERRIDE_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Label names cannot contain spaces.
        ///    {0} {1}
        ///    {2}^.
        /// </summary>
        internal static string Error_Label_Spaces_Contained {
            get {
                return ResourceManager.GetString("Error_Label_Spaces_Contained", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric literals with a base prefix (0x or 0b) must contain at least one digit after the prefix..
        /// </summary>
        internal static string Error_Literal_Base_Prefix_Only {
            get {
                return ResourceManager.GetString("Error_Literal_Base_Prefix_Only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating point numeric literals must contain a digit on at least one side of the decimal point..
        /// </summary>
        internal static string Error_Literal_Floating_Point_Decimal_Only {
            get {
                return ResourceManager.GetString("Error_Literal_Floating_Point_Decimal_Only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid character in numeric literal:
        ///    {0}
        ///    {1}^
        ///Did you forget a &apos;0x&apos; prefix before a hexadecimal number or put a digit other than 1 or 0 in a binary number?.
        /// </summary>
        internal static string Error_Literal_Invalid_Character {
            get {
                return ResourceManager.GetString("Error_Literal_Invalid_Character", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negative numeric literals must contain at least one digit..
        /// </summary>
        internal static string Error_Literal_Negative_Dash_Only {
            get {
                return ResourceManager.GetString("Error_Literal_Negative_Dash_Only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric literal too large. {0:N0} is the maximum value:
        ///    {1}.
        /// </summary>
        internal static string Error_Literal_Too_Large {
            get {
                return ResourceManager.GetString("Error_Literal_Too_Large", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric literal contains more than one decimal point:
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Literal_Too_Many_Points {
            get {
                return ResourceManager.GetString("Error_Literal_Too_Many_Points", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric literal too small. {0:N0} is the minimum value:
        ///    {1}.
        /// </summary>
        internal static string Error_Literal_Too_Small {
            get {
                return ResourceManager.GetString("Error_Literal_Too_Small", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric literals must contain at least one digit..
        /// </summary>
        internal static string Error_Literal_Underscore_Only {
            get {
                return ResourceManager.GetString("Error_Literal_Underscore_Only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first character of a numeric literal cannot be an underscore.
        ///    {0}
        ///    ^.
        /// </summary>
        internal static string Error_Literal_Underscore_Start {
            get {
                return ResourceManager.GetString("Error_Literal_Underscore_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of macro disabling block found when not currently inside one. Macro disabling blocks can be started with &apos;!&gt;&apos;..
        /// </summary>
        internal static string Error_Macro_Disable_Block_Missing_Start {
            get {
                return ResourceManager.GetString("Error_Macro_Disable_Block_Missing_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start of macro disabling block found when already inside one. Macro disabling blocks cannot be nested..
        /// </summary>
        internal static string Error_Macro_Disable_Block_Nested {
            get {
                return ResourceManager.GetString("Error_Macro_Disable_Block_Nested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Macro expansion limit of {0} exceeded..
        /// </summary>
        internal static string Error_Macro_Limit_Exceeded {
            get {
                return ResourceManager.GetString("Error_Macro_Limit_Exceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A parameter at index {0} is required for this macro, but was not given..
        /// </summary>
        internal static string Error_Macro_Missing_Parameter {
            get {
                return ResourceManager.GetString("Error_Macro_Missing_Parameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Macro names cannot contain brackets.
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Macro_Name_Brackets {
            get {
                return ResourceManager.GetString("Error_Macro_Name_Brackets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %MACRO directive requires either one or two operands. {0} were given..
        /// </summary>
        internal static string Error_MACRO_Operand_Count {
            get {
                return ResourceManager.GetString("Error_MACRO_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Macro parameter is missing an index value. Use &apos;$$&apos; to insert a literal &apos;$&apos; into the parameter content.
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Macro_Param_No_Number {
            get {
                return ResourceManager.GetString("Error_Macro_Param_No_Number", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given macro parameter start index does not point to an opening bracket..
        /// </summary>
        internal static string Error_Macro_Params_Bad_First_Char {
            get {
                return ResourceManager.GetString("Error_Macro_Params_Bad_First_Char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Macro parameter start index is outside the range of the given line..
        /// </summary>
        internal static string Error_Macro_Params_Bad_StartIndex {
            get {
                return ResourceManager.GetString("Error_Macro_Params_Bad_StartIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of line found while processing macro parameters. Did you forget a closing bracket?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Macro_Params_EndOfLine {
            get {
                return ResourceManager.GetString("Error_Macro_Params_EndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unescaped closing bracket found before end of line in macro parameter list. Use &apos;\)&apos; to have a literal closing bracket character inside a parameter.
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Macro_Params_Unescaped_Close {
            get {
                return ResourceManager.GetString("Error_Macro_Params_Unescaped_Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error on line {0} in &quot;{1}&quot;
        ///    &quot;{2}&quot;.
        /// </summary>
        internal static string Error_Message {
            get {
                return ResourceManager.GetString("Error_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Imported on line {0} of &quot;{1}&quot;.
        /// </summary>
        internal static string Error_Message_Imported {
            get {
                return ResourceManager.GetString("Error_Message_Imported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///Currently expanding the following macro(s): {0}.
        /// </summary>
        internal static string Error_Message_Macro_Stack {
            get {
                return ResourceManager.GetString("Error_Message_Macro_Stack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %MESSAGE directive requires either 1 or 2 operands. {0} were given..
        /// </summary>
        internal static string Error_MESSAGE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_MESSAGE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first operand to the %MESSAGE directive must be one of &apos;error&apos;, &apos;warning&apos; or &apos;suggestion&apos;..
        /// </summary>
        internal static string Error_MESSAGE_Operand_First {
            get {
                return ResourceManager.GetString("Error_MESSAGE_Operand_First", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second operand to the %MESSAGE directive must be a string..
        /// </summary>
        internal static string Error_MESSAGE_Operand_Second_String {
            get {
                return ResourceManager.GetString("Error_MESSAGE_Operand_Second_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second operand to the %MESSAGE directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_MESSAGE_Operand_Second_Type {
            get {
                return ResourceManager.GetString("Error_MESSAGE_Operand_Second_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mnemonics should be separated from operands with spaces, not commas:
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Mnemonic_Operand_Space {
            get {
                return ResourceManager.GetString("Error_Mnemonic_Operand_Space", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %NUM directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_NUM_Operand_Count {
            get {
                return ResourceManager.GetString("Error_NUM_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %NUM directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_NUM_Operand_Type {
            get {
                return ResourceManager.GetString("Error_NUM_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error on line {0} in {1}
        ///
        ///{2}.
        /// </summary>
        internal static string Error_On_Line {
            get {
                return ResourceManager.GetString("Error_On_Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is a block ending directive, however there is no currently open instance of the block it closes..
        /// </summary>
        internal static string Error_Opening_Directive_Missing {
            get {
                return ResourceManager.GetString("Error_Opening_Directive_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of operand &quot;{0}&quot; could not be determined. Did you forget a colon before a label name or misspell a register name?.
        /// </summary>
        internal static string Error_Operand_Invalid {
            get {
                return ResourceManager.GetString("Error_Operand_Invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid pointer size specifier. Size specifiers must be one of &apos;Q&apos;, &apos;D&apos;, &apos;W&apos;, or &apos;B&apos;.
        ///    {1}
        ///    ^.
        /// </summary>
        internal static string Error_Operand_Invalid_Pointer_Size {
            get {
                return ResourceManager.GetString("Error_Operand_Invalid_Pointer_Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operands cannot contain whitespace. Did you forget a comma?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Operand_Whitespace {
            get {
                return ResourceManager.GetString("Error_Operand_Whitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %PAD directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_PAD_Operand_Count {
            get {
                return ResourceManager.GetString("Error_PAD_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %PAD directive cannot be a label reference..
        /// </summary>
        internal static string Error_PAD_Operand_Label_Reference {
            get {
                return ResourceManager.GetString("Error_PAD_Operand_Label_Reference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %PAD directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_PAD_Operand_Type {
            get {
                return ResourceManager.GetString("Error_PAD_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the first or second characters of a pointer (but not both) must be an asterisk..
        /// </summary>
        internal static string Error_Pointer_Bad_First_Char {
            get {
                return ResourceManager.GetString("Error_Pointer_Bad_First_Char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of line found while processing quoted literal. Did you forget a closing quote?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Quoted_Literal_EndOfLine {
            get {
                return ResourceManager.GetString("Error_Quoted_Literal_EndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-whitespace characters found after quoted literal. Did you forget a comma?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Quoted_Literal_Followed {
            get {
                return ResourceManager.GetString("Error_Quoted_Literal_Followed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoted literal defined after non-whitespace characters. Did you forget a comma?
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Quoted_Literal_Following {
            get {
                return ResourceManager.GetString("Error_Quoted_Literal_Following", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An opening quote mark cannot be the only character on a line..
        /// </summary>
        internal static string Error_Quoted_Literal_Line_Length_One {
            get {
                return ResourceManager.GetString("Error_Quoted_Literal_Line_Length_One", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %REPEAT directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_REPEAT_Operand_Count {
            get {
                return ResourceManager.GetString("Error_REPEAT_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %REPEAT directive cannot be a label reference..
        /// </summary>
        internal static string Error_REPEAT_Operand_Label_Reference {
            get {
                return ResourceManager.GetString("Error_REPEAT_Operand_Label_Reference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %REPEAT directive cannot be negative or floating point..
        /// </summary>
        internal static string Error_REPEAT_Operand_Signed_Or_Floating {
            get {
                return ResourceManager.GetString("Error_REPEAT_Operand_Signed_Or_Floating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %REPEAT directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_REPEAT_Operand_Type {
            get {
                return ResourceManager.GetString("Error_REPEAT_Operand_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal operand to the %REPEAT directive cannot be zero..
        /// </summary>
        internal static string Error_REPEAT_Zero {
            get {
                return ResourceManager.GetString("Error_REPEAT_Zero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly stopped by %STOP directive..
        /// </summary>
        internal static string Error_STOP {
            get {
                return ResourceManager.GetString("Error_STOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %STOP directive requires either 1 or no operands. {0} were given..
        /// </summary>
        internal static string Error_STOP_Operand_Count {
            get {
                return ResourceManager.GetString("Error_STOP_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %STOP directive must be a string..
        /// </summary>
        internal static string Error_STOP_Operand_First_String {
            get {
                return ResourceManager.GetString("Error_STOP_Operand_First_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand to the %STOP directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_STOP_Operand_First_Type {
            get {
                return ResourceManager.GetString("Error_STOP_Operand_First_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given string start index does not point to a quote mark..
        /// </summary>
        internal static string Error_String_Bad_First_Char {
            get {
                return ResourceManager.GetString("Error_String_Bad_First_Char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String literal contains characters after closing quote mark..
        /// </summary>
        internal static string Error_String_Followed_Internal {
            get {
                return ResourceManager.GetString("Error_String_Followed_Internal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string literal is not a valid operand in this context..
        /// </summary>
        internal static string Error_String_Not_Allowed {
            get {
                return ResourceManager.GetString("Error_String_Not_Allowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given string is less than two characters long, which is invalid..
        /// </summary>
        internal static string Error_Too_Short_LT2 {
            get {
                return ResourceManager.GetString("Error_Too_Short_LT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %UNDEFINE directive requires a single operand. {0} were given..
        /// </summary>
        internal static string Error_UNDEFINE_Operand_Count {
            get {
                return ResourceManager.GetString("Error_UNDEFINE_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode escape must be immediately followed a 4 digit unicode codepoint
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Unicode_Escape_4_Digits {
            get {
                return ResourceManager.GetString("Error_Unicode_Escape_4_Digits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode escape must be immediately followed a valid 8 digit unicode codepoint (0x00000000 - 0x0010ffff excluding 0x0000d800 - 0x0000dfff)
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Unicode_Escape_8_Digits {
            get {
                return ResourceManager.GetString("Error_Unicode_Escape_8_Digits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of line reached when processing unicode escape
        ///    {0}
        ///    {1}^.
        /// </summary>
        internal static string Error_Unicode_Escape_EndOfLine {
            get {
                return ResourceManager.GetString("Error_Unicode_Escape_EndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembler variable names cannot be empty. To use an &apos;@&apos; sign in a string, escape it with a backslash..
        /// </summary>
        internal static string Error_Variable_Empty_Name {
            get {
                return ResourceManager.GetString("Error_Variable_Empty_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid character in assembler variable name:
        ///    {0}
        ///    {1}^
        ///Assembler variable names may not contain symbols other than underscores..
        /// </summary>
        internal static string Error_Variable_Invalid_Character {
            get {
                return ResourceManager.GetString("Error_Variable_Invalid_Character", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An assembler variable with the name &quot;{0}&quot; does not exist. To use an &apos;@&apos; sign in a string, escape it with a backslash..
        /// </summary>
        internal static string Error_Variable_Not_Exists {
            get {
                return ResourceManager.GetString("Error_Variable_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %VAROP directive requires 3 operands. {0} were given..
        /// </summary>
        internal static string Error_VAROP_Operand_Count {
            get {
                return ResourceManager.GetString("Error_VAROP_Operand_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a recognised operation for the %VAROP directive..
        /// </summary>
        internal static string Error_VAROP_Operand_First {
            get {
                return ResourceManager.GetString("Error_VAROP_Operand_First", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The third operand to the %VAROP directive cannot be a label reference..
        /// </summary>
        internal static string Error_VAROP_Operand_Third_Label_Reference {
            get {
                return ResourceManager.GetString("Error_VAROP_Operand_Third_Label_Reference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The third operand to the %VAROP directive must be a literal. An operand of type {0} was provided..
        /// </summary>
        internal static string Error_VAROP_Operand_Third_Type {
            get {
                return ResourceManager.GetString("Error_VAROP_Operand_Third_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The third operand to the %VAROP directive cannot be zero when the first operand is DIV or REM..
        /// </summary>
        internal static string Error_VAROP_Operand_Third_Zero {
            get {
                return ResourceManager.GetString("Error_VAROP_Operand_Third_Zero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %WHILE loop repeat limit of {0} exceeded..
        /// </summary>
        internal static string Error_WHILE_Limit_Exceeded {
            get {
                return ResourceManager.GetString("Error_WHILE_Limit_Exceeded", resourceCulture);
            }
        }
    }
}
