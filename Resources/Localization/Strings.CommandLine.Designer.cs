//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssEmbly.Resources.Localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings_CommandLine {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings_CommandLine() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AssEmbly.Resources.Localization.Strings.CommandLine", typeof(Strings_CommandLine).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid error code to disable..
        /// </summary>
        internal static string Assemble_Error_Invalid_Error_Code {
            get {
                return ResourceManager.GetString("Assemble_Error_Invalid_Error_Code", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid suggestion code to disable..
        /// </summary>
        internal static string Assemble_Error_Invalid_Suggestion_Code {
            get {
                return ResourceManager.GetString("Assemble_Error_Invalid_Suggestion_Code", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid warning code to disable..
        /// </summary>
        internal static string Assemble_Error_Invalid_Warning_Code {
            get {
                return ResourceManager.GetString("Assemble_Error_Invalid_Warning_Code", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///{0} {1:D4}{6} on line {2} in {3}
        ///    {4}
        ///{5}.
        /// </summary>
        internal static string Assemble_Error_Warning_Printout {
            get {
                return ResourceManager.GetString("Assemble_Error_Warning_Printout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  in macro {0}.
        /// </summary>
        internal static string Assemble_Error_Warning_Printout_InMacro {
            get {
                return ResourceManager.GetString("Assemble_Error_Warning_Printout_InMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FAILED.
        /// </summary>
        internal static string Assemble_Result_Header_Failed {
            get {
                return ResourceManager.GetString("Assemble_Result_Header_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Assembly .
        /// </summary>
        internal static string Assemble_Result_Header_Start {
            get {
                return ResourceManager.GetString("Assemble_Result_Header_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SUCCESS.
        /// </summary>
        internal static string Assemble_Result_Header_Success {
            get {
                return ResourceManager.GetString("Assemble_Result_Header_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processed {6} line(s) from {7} file(s) in {8:N0} milliseconds.
        ///{3} error(s), {4} warning(s), {5} suggestion(s).
        ///Program size: {0} bytes ({2} inc. header).
        ///Path: &quot;{1}&quot;..
        /// </summary>
        internal static string Assemble_Result_Success {
            get {
                return ResourceManager.GetString("Assemble_Result_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processed {8} line(s) from {9} file(s) in {10:N0} milliseconds.
        ///{5} error(s), {6} warning(s), {7} suggestion(s).
        ///Program size: {0} bytes ({2} compressed [{3:P0}], {4} inc. header).
        ///Path: &quot;{1}&quot;..
        /// </summary>
        internal static string Assemble_Result_Success_Compressed {
            get {
                return ResourceManager.GetString("Assemble_Result_Success_Compressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A key/value argument with the name {0} already exists. The value has not been updated..
        /// </summary>
        internal static string CommandLineArgs_Warning_Exists_KeyValue {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Exists_KeyValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The multi-character argument --{0} is given multiple times..
        /// </summary>
        internal static string CommandLineArgs_Warning_Exists_MultiCharacter {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Exists_MultiCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The single-character argument -{0} is given multiple times..
        /// </summary>
        internal static string CommandLineArgs_Warning_Exists_SingleCharacter {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Exists_SingleCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognised key/value option: --{0}.
        /// </summary>
        internal static string CommandLineArgs_Warning_Unconsumed_KeyValue {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Unconsumed_KeyValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognised multi-character option: --{0}.
        /// </summary>
        internal static string CommandLineArgs_Warning_Unconsumed_MultiCharacter {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Unconsumed_MultiCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} more positional arguments were given than were expected and have been ignored..
        /// </summary>
        internal static string CommandLineArgs_Warning_Unconsumed_Positional_Multiple {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Unconsumed_Positional_Multiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} more positional argument was given than was expected and has been ignored..
        /// </summary>
        internal static string CommandLineArgs_Warning_Unconsumed_Positional_Single {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Unconsumed_Positional_Single", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognised single-character option: -{0}.
        /// </summary>
        internal static string CommandLineArgs_Warning_Unconsumed_SingleCharacter {
            get {
                return ResourceManager.GetString("CommandLineArgs_Warning_Unconsumed_SingleCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred during disassembly:
        ///    {0}: {1}.
        /// </summary>
        internal static string Disassemble_Error_Unexpected {
            get {
                return ResourceManager.GetString("Disassemble_Error_Unexpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Program disassembled successfully. It can be found at: &quot;{0}&quot;.
        /// </summary>
        internal static string Disassemble_Success {
            get {
                return ResourceManager.GetString("Disassemble_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This program uses features incompatible with the current version of AssEmbly..
        /// </summary>
        internal static string Error_AAP_Feature_Incompatible {
            get {
                return ResourceManager.GetString("Error_AAP_Feature_Incompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to the source code file to be assembled is required. Run &apos;AssEmbly help assemble&apos; for more information..
        /// </summary>
        internal static string Error_Argument_Missing_Path_Assemble {
            get {
                return ResourceManager.GetString("Error_Argument_Missing_Path_Assemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to the source code file to be executed is required. Run &apos;AssEmbly help run&apos; for more information..
        /// </summary>
        internal static string Error_Argument_Missing_Path_AssembleAndExecute {
            get {
                return ResourceManager.GetString("Error_Argument_Missing_Path_AssembleAndExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to the assembled program to be debugged is required. Run &apos;AssEmbly help debug&apos; for more information..
        /// </summary>
        internal static string Error_Argument_Missing_Path_Debugger {
            get {
                return ResourceManager.GetString("Error_Argument_Missing_Path_Debugger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to the program to be disassembled is required. Run &apos;AssEmbly help disassemble&apos; for more information..
        /// </summary>
        internal static string Error_Argument_Missing_Path_Disassemble {
            get {
                return ResourceManager.GetString("Error_Argument_Missing_Path_Disassemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to the assembled program to be executed is required. Run &apos;AssEmbly help execute&apos; for more information..
        /// </summary>
        internal static string Error_Argument_Missing_Path_Execute {
            get {
                return ResourceManager.GetString("Error_Argument_Missing_Path_Execute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file does not exist..
        /// </summary>
        internal static string Error_File_Not_Exists {
            get {
                return ResourceManager.GetString("Error_File_Not_Exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given executable file is invalid. Make sure you&apos;re not attempting to load the source file instead of the executable. To run an executable built in AssEmbly v1.x.x, use the --v1-format parameter..
        /// </summary>
        internal static string Error_Invalid_AAP {
            get {
                return ResourceManager.GetString("Error_Invalid_AAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid maximum number of macro expansions..
        /// </summary>
        internal static string Error_Invalid_Macro_Limit {
            get {
                return ResourceManager.GetString("Error_Invalid_Macro_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid number of bytes for memory size..
        /// </summary>
        internal static string Error_Invalid_Memory_Size {
            get {
                return ResourceManager.GetString("Error_Invalid_Memory_Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid operation. Run &apos;AssEmbly help&apos; to see a list of available operations..
        /// </summary>
        internal static string Error_Invalid_Operation {
            get {
                return ResourceManager.GetString("Error_Invalid_Operation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid value for an assembler variable..
        /// </summary>
        internal static string Error_Invalid_Variable_Value {
            get {
                return ResourceManager.GetString("Error_Invalid_Variable_Value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid maximum number of while iterations..
        /// </summary>
        internal static string Error_Invalid_While_Limit {
            get {
                return ResourceManager.GetString("Error_Invalid_While_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation to perform is required. Run the &apos;help&apos; operation for information on available operations..
        /// </summary>
        internal static string Error_Missing_Operation_Body {
            get {
                return ResourceManager.GetString("Error_Missing_Operation_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to i.e. &apos;AssEmbly help&apos;.
        /// </summary>
        internal static string Error_Missing_Operation_Hint {
            get {
                return ResourceManager.GetString("Error_Missing_Operation_Hint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because the major release number is higher ({0} &gt; {1}), this program will not be executed. Use the -i or --ignore-newer-version parameter to override this..
        /// </summary>
        internal static string Error_Newer_Major_Build_Version {
            get {
                return ResourceManager.GetString("Error_Newer_Major_Build_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred while loading your program:
        ///    {0}: {1}.
        /// </summary>
        internal static string Error_Program_Load_Unexpected {
            get {
                return ResourceManager.GetString("Error_Program_Load_Unexpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instruction tried to access an invalid memory address..
        /// </summary>
        internal static string Error_Runtime_Invalid_Address {
            get {
                return ResourceManager.GetString("Error_Runtime_Invalid_Address", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///An error occurred executing your program:
        ///    {0}.
        /// </summary>
        internal static string Error_Runtime_Known {
            get {
                return ResourceManager.GetString("Error_Runtime_Known", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instruction attempted to divide by zero..
        /// </summary>
        internal static string Error_Runtime_Zero_Divide {
            get {
                return ResourceManager.GetString("Error_Runtime_Zero_Divide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred:
        ///    {0}: {1}.
        /// </summary>
        internal static string Error_Unexpected_With_Type {
            get {
                return ResourceManager.GetString("Error_Unexpected_With_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: &apos;AssEmbly &lt;operation&gt; [parameters]&apos;
        ///Any command can take the &apos;--no-header&apos; or &apos;-n&apos; optional parameter to disable the copyright printout.
        ///Using the &apos;--version&apos; or &apos;-v&apos; optional parameter will print just the current version of AssEmbly then exit, regardless of other parameters.
        ///
        ///Run &apos;AssEmbly help [operation]&apos; to see usage information and all the available options for a given operation.
        ///
        ///Single-character parameter options are denoted with a single dash and are case-sensitive.
        ///Multi-character par [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_Body {
            get {
                return ResourceManager.GetString("Help_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Take a source file written in AssEmbly and assemble it in to an executable file..
        /// </summary>
        internal static string Help_Description_Assemble {
            get {
                return ResourceManager.GetString("Help_Description_Assemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Step through an assembled executable file, pausing before each instruction begins execution..
        /// </summary>
        internal static string Help_Description_Debug {
            get {
                return ResourceManager.GetString("Help_Description_Debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate an AssEmbly source code file from an already assembled executable..
        /// </summary>
        internal static string Help_Description_Disassemble {
            get {
                return ResourceManager.GetString("Help_Description_Disassemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute an already assembled executable file..
        /// </summary>
        internal static string Help_Description_Execute {
            get {
                return ResourceManager.GetString("Help_Description_Execute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print this help text, or get help with a specific operation..
        /// </summary>
        internal static string Help_Description_Help {
            get {
                return ResourceManager.GetString("Help_Description_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print the full GPLv3 license text that this software is licensed under..
        /// </summary>
        internal static string Help_Description_License {
            get {
                return ResourceManager.GetString("Help_Description_License", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run an AssEmbly REPL environment that lets you interactively run AssEmbly instructions..
        /// </summary>
        internal static string Help_Description_REPL {
            get {
                return ResourceManager.GetString("Help_Description_REPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemble then execute a source file written in AssEmbly. The assembled program will be discarded after execution..
        /// </summary>
        internal static string Help_Description_Run {
            get {
                return ResourceManager.GetString("Help_Description_Run", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     assemble - {0}.
        /// </summary>
        internal static string Help_Operation_Assemble {
            get {
                return ResourceManager.GetString("Help_Operation_Assemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     debug - {0}.
        /// </summary>
        internal static string Help_Operation_Debug {
            get {
                return ResourceManager.GetString("Help_Operation_Debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     disassemble - {0}.
        /// </summary>
        internal static string Help_Operation_Disassemble {
            get {
                return ResourceManager.GetString("Help_Operation_Disassemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     execute - {0}.
        /// </summary>
        internal static string Help_Operation_Execute {
            get {
                return ResourceManager.GetString("Help_Operation_Execute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     help - {0}.
        /// </summary>
        internal static string Help_Operation_Help {
            get {
                return ResourceManager.GetString("Help_Operation_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     license - {0}.
        /// </summary>
        internal static string Help_Operation_License {
            get {
                return ResourceManager.GetString("Help_Operation_License", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     repl - {0}.
        /// </summary>
        internal static string Help_Operation_REPL {
            get {
                return ResourceManager.GetString("Help_Operation_REPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     run - {0}.
        /// </summary>
        internal static string Help_Operation_Run {
            get {
                return ResourceManager.GetString("Help_Operation_Run", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: &apos;AssEmbly assemble &lt;file-path&gt; [destination-path] [options]&apos;
        /// Options:
        ///    -D, --no-debug-file - Do not generate a debug information file with the executable.
        ///    -E|W|S, --no-errors|warnings|suggestions - Disable all messages with severity error, warning, or suggestion. Fatal errors cannot be disabled.
        ///    --disabled-errors|warnings|suggestions=xxxx,xxxx - Disable one or more specific messages with severity error, warning, or suggestion; and code xxxx. Fatal errors cannot be disabled. Formatt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_Options_Assemble {
            get {
                return ResourceManager.GetString("Help_Options_Assemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: Usage: &apos;AssEmbly debug &lt;file-path&gt; [debug-info-file-path] [options]&apos;
        ///    Providing a debug info file will allow label names and original AssEmbly source lines to be made available.
        /// Options:
        ///    --mem-size=123 - Sets the total size of memory available to the program in bytes.
        ///    --v1-call-stack - Use the old call stack behaviour from AssEmbly v1.x.x which pushes 3 registers when calling instead of 2.
        ///    -1, --v1-format - Specifies that the given executable uses the v1.x.x header-less format [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_Options_Debug {
            get {
                return ResourceManager.GetString("Help_Options_Debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: &apos;AssEmbly disassemble &lt;file-path&gt; [destination-path] [options]&apos;
        /// Options:
        ///    -S, --no-strings - Don&apos;t attempt to locate and decode strings; keep them as raw bytes
        ///    -P, --no-pads - Don&apos;t attempt to locate uses of the %PAD directive; keep them as chains of HLT
        ///    -F, --no-floats - Don&apos;t attempt to detect floating point literal operands; keep them as integers
        ///    -G, --no-signed - Don&apos;t attempt to detect signed negative operands; keep them as positive integers
        ///    -f, --allow-full-base-opc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_Options_Disassemble {
            get {
                return ResourceManager.GetString("Help_Options_Disassemble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: &apos;AssEmbly execute &lt;file-path&gt; [options]&apos;
        /// Options:
        ///    --mem-size=123 - Sets the total size of memory available to the program in bytes.
        ///    --v1-call-stack - Use the old call stack behaviour from AssEmbly v1.x.x which pushes 3 registers when calling instead of 2.
        ///    -1, --v1-format - Specifies that the given executable uses the v1.x.x header-less format. Also enables --v1-call-stack
        ///    -i, --ignore-newer-version - Force an executable to be loaded even if the major version is greater than t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_Options_Execute {
            get {
                return ResourceManager.GetString("Help_Options_Execute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: &apos;AssEmbly help [operation]&apos;.
        /// </summary>
        internal static string Help_Options_Help {
            get {
                return ResourceManager.GetString("Help_Options_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: &apos;AssEmbly license&apos;.
        /// </summary>
        internal static string Help_Options_License {
            get {
                return ResourceManager.GetString("Help_Options_License", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: &apos;AssEmbly repl [options]&apos;
        /// Options:
        ///    --mem-size=123 - Sets the total size of memory available to the REPL in bytes.
        ///    --v1-call-stack - Use the old call stack behaviour from AssEmbly v1.x.x which pushes 3 registers when calling instead of 2.
        ///    -u, --unmapped-stack - Disable stack/heap overlap protection. May cause hard to detect bugs.
        ///    -a, --auto-echo - Automatically write inputted characters back to the console..
        /// </summary>
        internal static string Help_Options_REPL {
            get {
                return ResourceManager.GetString("Help_Options_REPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /// Usage: Usage: &apos;AssEmbly run &lt;file-path&gt; [options]&apos;
        /// Options:
        ///    --macro-limit=123 - Set the limit of macro expansions that can occur on a single line.
        ///    --while-limit=123 - Set the limit of %WHILE loop iterations that can occur throughout the entire program.
        ///    --define=VAR_WITH_VALUE:123,ZERO_VAR - Define one or more assembler variables. Formatted as a comma-separated list of variables, with the variable name and its value separated by a colon. Variables given without the colon and value will be [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_Options_Run {
            get {
                return ResourceManager.GetString("Help_Options_Run", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error accessing the LICENSE resource. Please go to &lt;https://www.gnu.org/licenses/gpl-3.0.html&gt; to see the license text..
        /// </summary>
        internal static string License_Error {
            get {
                return ResourceManager.GetString("License_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AssEmbly is free software: you can redistribute it and/or modify
        ///it under the terms of the GNU General Public License as published by
        ///the Free Software Foundation, either version 3 of the License, or
        ///(at your option) any later version.
        ///
        ///This program is distributed in the hope that it will be useful,
        ///but WITHOUT ANY WARRANTY; without even the implied warranty of
        ///MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        ///GNU General Public License for more details..
        /// </summary>
        internal static string License_Header {
            get {
                return ResourceManager.GetString("License_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning: This program was assembled for a newer version of AssEmbly. It was built for version {0}.{1}.{2} - you have version {3}.{4}.{5}..
        /// </summary>
        internal static string Warning_Newer_Build_Version {
            get {
                return ResourceManager.GetString("Warning_Newer_Build_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Warning: Processor halted with an external assembly still open. You should use the ASMX_CLA instruction to close the currently open assembly before the program halts..
        /// </summary>
        internal static string Warning_Processor_Exit_External_Open {
            get {
                return ResourceManager.GetString("Warning_Processor_Exit_External_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Warning: Processor halted with a file still open. This may cause data to be incorrectly or only partially written. You should use the CFL instruction to close the currently open file before the program halts..
        /// </summary>
        internal static string Warning_Processor_Exit_File_Open {
            get {
                return ResourceManager.GetString("Warning_Processor_Exit_File_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Warning: Processor halted with {0} memory region(s) still allocated. You should use the HEAP_FRE instruction to free all currently allocated regions before the program halts..
        /// </summary>
        internal static string Warning_Processor_Exit_Region_Mapped {
            get {
                return ResourceManager.GetString("Warning_Processor_Exit_Region_Mapped", resourceCulture);
            }
        }
    }
}
